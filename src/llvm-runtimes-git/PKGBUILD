pkgname=('libc++-git' 'libc++abi-git' 'libunwind-git')

pkgver=20.0.0_r513407.6f04e65c3c62
pkgrel=1
arch=('x86_64')
url="https://llvm.org/"
license=('custom:Apache 2.0 with LLVM Exception')
makedepends=('git' 'cmake' 'ninja' 'libffi' 'libedit' 'ncurses' 'libxml2' 
             'python-setuptools' 'lldb' 'ocaml' 'ocaml-ctypes' 'ocaml-findlib'
             'python-sphinx' 'python-recommonmark' 'swig' 'python' 'python-six'
             'python-myst-parser' 'lua53' 'ocl-icd' 'opencl-headers' 'z3'
             'jsoncpp' 'ocaml-stdlib-shims')
checkdepends=("python-psutil")
source=(
  "llvm-project::git+https://github.com/llvm/llvm-project.git"
  "libunwind.pc"
)

md5sums=(
  'SKIP'
  'SKIP'
)
sha512sums=(
  'SKIP'
  'SKIP'
)
options=('staticlibs')

# NINJAFLAGS is an env var used to pass commandline options to ninja
# NOTE: It's your responbility to validate the value of $NINJAFLAGS. If unsure, don't set it.
# NINJAFLAGS="-j20"

pkgver() {
    cd llvm-project/cmake/Modules

    # This will almost match the output of `llvm-config --version` when the
    # LLVM_APPEND_VC_REV cmake flag is turned on. The only difference is
    # dash being replaced with underscore because of Pacman requirements.
    local _pkgver=$(awk -F 'MAJOR |MINOR |PATCH |)' \
            'BEGIN { ORS="." ; i=0 } \
             /set\(LLVM_VERSION_/ { print $2 ; i++ ; if (i==2) ORS="" } \
             END { print "\n" }' \
             LLVMVersion.cmake)_r$(git rev-list --count HEAD).$(git rev-parse --short HEAD)
    echo "$_pkgver"
}

prepare() {
  # pushd "$srcdir/llvm-project"
  # for patch in $srcdir/*.patch; do
  #   patch -Np1 -i "$patch"
  # done
  # popd || return
  mkdir -p build
}

build() {
    pushd build || return
    export CFLAGS+=" ${CPPFLAGS}"
    export CXXFLAGS+=" ${CPPFLAGS}"
    cmake -G Ninja \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_C_COMPILER=clang \
    -DCMAKE_CXX_COMPILER=clang++ \
    -DLLVM_EXTERNAL_LIT=/usr/bin/lit \
    -DLLVM_ENABLE_PIC=ON \
    -DLLVM_ENABLE_RUNTIMES="libcxx;libcxxabi;libunwind;pstl" \
    -DLIBCXX_INSTALL_MODULES=ON \
    -DLIBCXX_ENABLE_PARALLEL_ALGORITHMS=YES \
    -DLIBCXX_ENABLE_STATIC=YES \
    -DLIBCXX_ENABLE_SHARED=YES \
    -DLIBCXX_ENABLE_INCOMPLETE_FEATURES=ON \
    -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY=ON \
    -DLIBCXX_USE_LLVM_UNWINDER=YES \
    -DLIBCXX_ENABLE_SHARED=YES \
    -DPSTL_PARALLEL_BACKEND="tbb" \
    ../llvm-project/runtimes cxx cxxabi unwind
}

check() {
  # I trust the LLVM folks
  #ninja -C build check-libcxx check-libcxxabi check-libunwind
  true
}

package_libc++-git () {
  pkgdesc='LLVM C++ standard library.'
  provides=('libc++-git' 'libc++')
  conflicts=('libc++')

  DESTDIR="$pkgdir" ninja -C build $NINJAFLAGS install-cxx
}
 
package_libc++abi-git() {
  pkgdesc='Low level support for the LLVM C++ standard library.'
  provides=('libc++abi-git' 'libc++abi')
  conflicts=('libc++abi')
  
  DESTDIR="$pkgdir" ninja -C build $NINJAFLAGS install-cxxabi
}

package_libunwind-git() {
  pkgdesc='LLVM unwind library.'
  provides=('libunwind-git' 'libunwind')
  conflicts=('libunwind')

  DESTDIR="$pkgdir" ninja -C build $NINJAFLAGS install-unwind
  # install pkg-config file
  install -Dm644 "$srcdir/libunwind.pc" "$pkgdir/usr/lib/pkgconfig/libunwind.pc"
}

